import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import styles from './ScheduleHistory.module.css';
import {
  LuCalendar,
  LuClock,
  LuMapPin,
  LuMessageCircle,
  LuFileText,
  LuChevronDown,
  LuPause,
  LuRotateCcw,
  LuMonitor,
  LuWifi,
  LuTriangleAlert,
  LuCircleCheck,
  LuCircleX,
  LuCalendarClock,
  LuActivity,
  LuCirclePlay,
  LuClipboardPlus,
} from 'react-icons/lu';

import { FaHome, FaUsers } from 'react-icons/fa';
import button from '../../components/Button/Button';
import { useAuth } from '../../context/AuthContext';
import LecturerMessage from './components/LecturerMessage/LecturerMessage';
import { useParams } from 'react-router-dom';
import { useScheduleInstance } from '../../hooks/useScheduleInstance';

const dataIn = [
  {
    _id: 'instance1',
    scheduleId: 'sched001',
    classDate: '2025-08-01T09:00:00.000Z',
    classStatus: 'held',
    updatedTime: { start: '10:00', end: '12:00' },
    updatedLocation: 'LT1, Science Complex',
    deliveryMode: 'physical',
    isAutoGenerated: false,
    lecturerMessages: [
      {
        id: 'msg1',
        text: 'Reminder: Bring your lab coats tomorrow.',
        createdAt: '2025-07-31T18:00:00.000Z',
        type: 'reminder',
        author: 'Dr. Smith',
      },
      {
        id: 'msg2',
        text: 'Covered Michaelis-Menten equation and Lineweaver-Burk plot.',
        createdAt: '2025-08-01T12:15:00.000Z',
        type: 'info',
        author: 'Dr. Smith',
      },
    ],
    feedbackFromLecturer: 'Great student interaction today.',
    syllabusTopic: 'Introduction to Enzyme Kinetics',
    notes: '',
    createdBy: 'rep123',
    createdByName: 'Felix Vincent',
    attendanceSummary: { totalPresent: 18, totalAbsent: 2, totalLate: 3 },
    studentPresence: [
      { studentId: 'stu1', status: 'present' },
      { studentId: 'stu2', status: 'late' },
      { studentId: 'stu3', status: 'absent' },
    ],
  },
  {
    _id: 'instance2',
    scheduleId: 'sched002',
    classDate: '2025-08-02T08:00:00.000Z',
    classStatus: 'holding',
    updatedTime: { start: '08:00', end: '10:00' },
    updatedLocation: 'Main Auditorium',
    deliveryMode: 'physical',
    isAutoGenerated: true,
    lecturerMessages: [
      {
        id: 'msg3',
        text: 'Attendance is now open.',
        createdAt: '2025-08-02T07:55:00.000Z',
        type: 'system',
        author: 'System',
      },
    ],
    feedbackFromLecturer: '',
    syllabusTopic: 'Cell Structure and Function',
    notes: 'Currently discussing organelles.',
    createdBy: 'rep001',
    createdByName: 'Ada Lovelace',
    attendanceSummary: { totalPresent: 5, totalAbsent: 0, totalLate: 1 },
    studentPresence: [
      { studentId: 'stu10', status: 'present' },
      { studentId: 'stu11', status: 'late' },
    ],
  },
  {
    _id: 'instance3',
    scheduleId: 'sched003',
    classDate: '2025-08-03T09:00:00.000Z',
    classStatus: 'break',
    updatedTime: { start: '09:00', end: '11:00' },
    updatedLocation: 'Virtual (Zoom)',
    deliveryMode: 'virtual',
    isAutoGenerated: false,
    lecturerMessages: [
      {
        id: 'msg4',
        text: 'Short break. Resume in 10 minutes.',
        createdAt: '2025-08-03T09:45:00.000Z',
        type: 'info',
        author: 'Grace Hopper',
      },
    ],
    feedbackFromLecturer: '',
    syllabusTopic: 'Photosynthesis',
    notes: '',
    createdBy: 'rep002',
    createdByName: 'Grace Hopper',
    attendanceSummary: { totalPresent: 20, totalAbsent: 0, totalLate: 0 },
    studentPresence: [],
  },
  {
    _id: 'instance4',
    scheduleId: 'sched004',
    classDate: '2025-08-04T08:00:00.000Z',
    classStatus: 'partial',
    updatedTime: { start: '08:00', end: '09:00' },
    updatedLocation: 'LT2, Engineering Hall',
    deliveryMode: 'hybrid',
    isAutoGenerated: false,
    lecturerMessages: [
      {
        id: 'msg5',
        text: 'Had to end early due to power outage.',
        createdAt: '2025-08-04T08:55:00.000Z',
        type: 'urgent',
        author: 'Samuel Obi',
      },
    ],
    feedbackFromLecturer: 'Students participated actively before disruption.',
    syllabusTopic: 'Thermodynamics in Biochemistry',
    notes: 'Covered entropy only.',
    createdBy: 'rep789',
    createdByName: 'Samuel Obi',
    attendanceSummary: { totalPresent: 10, totalAbsent: 5, totalLate: 2 },
    studentPresence: [],
  },
  {
    _id: 'instance5',
    scheduleId: 'sched005',
    classDate: '2025-08-05T14:00:00.000Z',
    classStatus: 'disrupted',
    updatedTime: { start: '14:00', end: '14:30' },
    updatedLocation: 'LT3, Medical Building',
    deliveryMode: 'physical',
    isAutoGenerated: false,
    lecturerMessages: [
      {
        id: 'msg6',
        text: 'Class ended abruptly due to fire drill.',
        createdAt: '2025-08-05T14:25:00.000Z',
        type: 'urgent',
        author: 'Dr. Banner',
      },
    ],
    feedbackFromLecturer: '',
    syllabusTopic: 'Immunology Basics',
    notes: '',
    createdBy: 'rep100',
    createdByName: 'Dr. Banner',
    attendanceSummary: { totalPresent: 8, totalAbsent: 12, totalLate: 1 },
    studentPresence: [],
  },
  {
    _id: 'instance6',
    scheduleId: 'sched006',
    classDate: '2025-08-06T08:00:00.000Z',
    classStatus: 'offsite',
    updatedLocation: 'City Science Museum',
    deliveryMode: 'physical',
    isAutoGenerated: false,
    lecturerMessages: [
      {
        id: 'msg7',
        text: 'Field trip to museum. Meet at 8 AM sharp.',
        createdAt: '2025-08-05T16:00:00.000Z',
        type: 'reminder',
        author: 'Prof. Xavier',
      },
    ],
    feedbackFromLecturer: '',
    syllabusTopic: 'Applied Physics in Biology',
    notes: '',
    createdBy: 'rep777',
    createdByName: 'Prof. Xavier',
    attendanceSummary: { totalPresent: 15, totalAbsent: 5, totalLate: 0 },
    studentPresence: [],
  },
  {
    _id: 'instance7',
    scheduleId: 'sched007',
    classDate: '2025-08-07T10:00:00.000Z',
    classStatus: 'makeup',
    updatedTime: { start: '10:00', end: '12:00' },
    updatedLocation: 'LT5, Science Complex',
    deliveryMode: 'hybrid',
    isAutoGenerated: false,
    lecturerMessages: [
      {
        id: 'msg8',
        text: 'This is a make-up session for the missed class last week.',
        createdAt: '2025-08-06T18:30:00.000Z',
        type: 'info',
        author: 'Muna James',
      },
    ],
    feedbackFromLecturer: '',
    syllabusTopic: 'DNA Replication',
    notes: '',
    createdBy: 'rep456',
    createdByName: 'Muna James',
    attendanceSummary: { totalPresent: 12, totalAbsent: 3, totalLate: 0 },
    studentPresence: [],
  },
  {
    _id: 'instance8',
    scheduleId: 'sched008',
    classDate: '2025-08-08T09:00:00.000Z',
    classStatus: 'pending_approval',
    updatedLocation: 'LT4, Science Complex',
    deliveryMode: 'physical',
    isAutoGenerated: false,
    lecturerMessages: [
      {
        id: 'msg9',
        text: 'Proposed extra tutorial â€” waiting for approval.',
        createdAt: '2025-08-07T12:00:00.000Z',
        type: 'proposal',
        author: 'Jane Doe',
      },
    ],
    feedbackFromLecturer: '',
    syllabusTopic: '',
    notes: '',
    createdBy: 'rep300',
    createdByName: 'Jane Doe',
    attendanceSummary: { totalPresent: 0, totalAbsent: 0, totalLate: 0 },
    studentPresence: [],
  },
];

const ScheduleHistory = () => {
  const [expandedCard, setExpandedCard] = useState(null);

  const { user } = useAuth();
  const isRep = user.role === 'class-rep';

  const { id } = useParams();
  const { data = [] } = useScheduleInstance(id);

  const dummyScheduleInstances =
    data.length > 0 ? [...data, ...dataIn] : dataIn;

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return {
      day: date.getDate(),
      month: date.toLocaleDateString('en-US', { month: 'short' }),
      weekday: date.toLocaleDateString('en-US', { weekday: 'long' }),
      time: date.toLocaleTimeString('en-US', {
        hour: '2-digit',
        minute: '2-digit',
        hour12: false,
      }),
    };
  };

  const getStatusConfig = (status) => {
    const configs = {
      // Pre-class / Planning
      scheduled: {
        color: '#2563eb', // Deep blue
        bgColor: '#dbeafe',
        icon: LuCalendarClock,
        text: 'Scheduled',
      },
      pending_approval: {
        color: '#9333ea', // Strong purple
        bgColor: '#ede9fe',
        icon: LuClock,
        text: 'Pending Approval',
      },
      rescheduled: {
        color: '#0ea5e9', // Sky blue
        bgColor: '#e0f2fe',
        icon: LuRotateCcw,
        text: 'Rescheduled',
      },
      postponed: {
        color: '#f97316', // Orange
        bgColor: '#fff7ed',
        icon: LuPause,
        text: 'Postponed',
      },

      // Live states
      holding: {
        color: '#22bac5',
        bgColor: '#dcfbfc',
        icon: LuCirclePlay,
        text: 'In Progress',
      },
      break: {
        color: '#eab308', // Yellow
        bgColor: '#fefce8',
        icon: LuPause,
        text: 'Break',
      },

      // Completion states
      held: {
        color: '#16a34a', // Darker green
        bgColor: '#ecfdf5',
        icon: LuCircleCheck,
        text: 'Completed',
      },
      partial: {
        color: '#facc15', // Golden yellow
        bgColor: '#fef9c3',
        icon: LuActivity,
        text: 'Partial Session',
      },
      cancelled: {
        color: '#dc2626', // Red
        bgColor: '#fee2e2',
        icon: LuCircleX,
        text: 'Cancelled',
      },
      missed: {
        color: '#b91c1c', // Darker red
        bgColor: '#fee2e2',
        icon: LuTriangleAlert,
        text: 'Missed',
      },

      // Special cases
      disrupted: {
        color: '#d97706', // Amber
        bgColor: '#fffbeb',
        icon: LuTriangleAlert,
        text: 'Disrupted',
      },
      makeup: {
        color: '#0284c7', // Blue-cyan
        bgColor: '#e0f2fe',
        icon: LuRotateCcw,
        text: 'Make-up Session',
      },
      offsite: {
        color: '#7c3aed', // Violet
        bgColor: '#f3e8ff',
        icon: LuMapPin,
        text: 'Offsite',
      },
    };

    return (
      configs[status] || {
        color: '#6b7280',
        bgColor: '#f9fafb',
        icon: LuCalendarClock,
        text: 'Unknown',
      }
    );
  };

  const getDeliveryModeIcon = (mode) => {
    switch (mode) {
      case 'virtual':
        return LuMonitor;
      case 'hybrid':
        return LuWifi;
      case 'physical':
      default:
        return FaHome;
    }
  };

  const toggleExpanded = (instanceId) => {
    setExpandedCard(expandedCard === instanceId ? null : instanceId);
  };

  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.3 },
    },
    hover: {
      y: -2,
      boxShadow: '0 10px 25px rgba(59, 130, 246, 0.15)',
      transition: { duration: 0.2 },
    },
  };

  const expandVariants = {
    collapsed: { height: 0, opacity: 0 },
    expanded: {
      height: 'auto',
      opacity: 1,
      transition: { duration: 0.3, ease: 'easeInOut' },
    },
  };

  return (
    <div className={styles.wrapper}>
      <div className={styles.container}>
        {/* Header */}
        <motion.div
          className={styles.sectionHeader}
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 1 }}>
          <header className={styles.header}>
            <h1 className={styles.title}>Class Schedule History</h1>
            <p className={styles.subtitle}>
              Stay organized â€” view, track, and manage all your upcoming and
              past class sessions.
            </p>
          </header>
        </motion.div>

        {/* Calendar Grid */}
        <div className={styles.cardsGrid}>
          {dummyScheduleInstances.map((instance, index) => {
            const dateInfo = formatDate(instance.classDate);
            const statusConfig = getStatusConfig(instance.classStatus);
            const StatusIcon = statusConfig.icon;
            const DeliveryIcon = getDeliveryModeIcon(instance.deliveryMode);
            const isExpanded = expandedCard === instance._id;

            return (
              <motion.div
                key={instance._id}
                variants={cardVariants}
                initial="hidden"
                animate="visible"
                whileHover="hover"
                transition={{ delay: index * 0.1 }}
                className={styles.card}>
                {/* Card Header */}
                <div
                  className={styles.cardHeader}
                  style={{
                    background: `linear-gradient(135deg, ${statusConfig.color} 0%, ${statusConfig.color}dd 100%)`,
                  }}>
                  <div className={styles.cardHeaderTop}>
                    <div>
                      <div className={styles.cardHeaderDate}>
                        {dateInfo.day}
                      </div>
                      <div className={styles.cardHeaderMonth}>
                        {dateInfo.month}
                      </div>
                    </div>

                    <div className={styles.cardStatus}>
                      <StatusIcon size={14} />
                      {statusConfig.text}
                    </div>
                  </div>

                  <div className={styles.cardWeekday}>{dateInfo.weekday}</div>

                  <div className={styles.cardTime}>
                    <LuClock size={14} />
                    {instance.updatedTime
                      ? `${instance.updatedTime.start} - ${instance.updatedTime.end}`
                      : dateInfo.time}
                  </div>
                </div>

                {/* Card Content */}
                <div className={styles.cardBody}>
                  <div
                    className={styles.cardTitleRow}
                    onClick={() => toggleExpanded(instance._id)}>
                    <h3 className={styles.cardTitle}>
                      {instance.syllabusTopic || 'No topic specified'}
                    </h3>

                    <motion.div
                      animate={{ rotate: isExpanded ? 180 : 0 }}
                      transition={{ duration: 0.2 }}>
                      <LuChevronDown
                        size={20}
                        color="#64748b"
                      />
                    </motion.div>
                  </div>

                  {/* Quick Info */}
                  <div
                    className={styles.quickInfo}
                    onClick={() => toggleExpanded(instance._id)}>
                    <div className={styles.quickInfoItem}>
                      <DeliveryIcon size={16} />
                      {instance.deliveryMode}
                    </div>

                    {instance.updatedLocation && (
                      <div className={styles.quickInfoItem}>
                        <LuMapPin size={16} />
                        {instance.updatedLocation}
                      </div>
                    )}

                    {instance.attendanceSummary.totalPresent > 0 && (
                      <div className={styles.quickInfoItem}>
                        <FaUsers size={16} />
                        {instance.attendanceSummary.totalPresent} present
                      </div>
                    )}
                  </div>
                  {instance.classStatus === 'holding' &&
                    button.multiple({
                      icon: LuClipboardPlus,
                      element: 'Take Attendance',
                      name: 'default_button',
                    })}

                  <LecturerMessage
                    messages={instance.lecturerMessages}
                    isRep={isRep}
                    onSave={(newMsg) => {
                      console.log('New message:', newMsg);
                    }}
                  />

                  {/* Expanded Content */}
                  <AnimatePresence>
                    {isExpanded && (
                      <motion.div
                        variants={expandVariants}
                        initial="collapsed"
                        animate="expanded"
                        exit="collapsed"
                        style={{ overflow: 'hidden' }}>
                        <div className={styles.detailedInfo}>
                          {/* Detailed Info */}
                          <div className={styles.infoGrid}>
                            <div className={styles.infoBox}>
                              <div className={styles.infoBoxLabel}>
                                Created By
                              </div>
                              <div className={styles.infoBoxValue}>
                                {instance.createdByName}
                              </div>
                            </div>

                            <div className={styles.infoBox}>
                              <div className={styles.infoBoxLabel}>
                                Schedule ID
                              </div>
                              <div
                                className={`${styles.infoBoxValue} ${styles.monospace}`}>
                                {instance.scheduleId}
                              </div>
                            </div>
                          </div>

                          {/* Attendance Summary */}
                          {instance.attendanceSummary.totalPresent > 0 && (
                            <div className={styles.attendanceSummary}>
                              <div className={styles.attendanceSummaryHeader}>
                                <FaUsers
                                  size={18}
                                  color="#3b82f6"
                                />
                                <span>Attendance Summary</span>
                              </div>
                              <div className={styles.attendanceStats}>
                                <div className={styles.statItem}>
                                  <div className={styles.statPresent}>
                                    {instance.attendanceSummary.totalPresent}
                                  </div>
                                  <div className={styles.statLabel}>
                                    Present
                                  </div>
                                </div>
                                <div className={styles.statItem}>
                                  <div className={styles.statLate}>
                                    {instance.attendanceSummary.totalLate}
                                  </div>
                                  <div className={styles.statLabel}>Late</div>
                                </div>
                                <div className={styles.statItem}>
                                  <div className={styles.statAbsent}>
                                    {instance.attendanceSummary.totalAbsent}
                                  </div>
                                  <div className={styles.statLabel}>Absent</div>
                                </div>
                              </div>
                            </div>
                          )}

                          {/* Feedback */}
                          {instance.feedbackFromLecturer && (
                            <div className={styles.feedback}>
                              <div className={styles.feedbackHeader}>
                                <LuMessageCircle
                                  size={16}
                                  color="#10b981"
                                />
                                <span>Lecturer Feedback</span>
                              </div>
                              <p>{instance.feedbackFromLecturer}</p>
                            </div>
                          )}

                          {/* Notes */}
                          {instance.notes && (
                            <div className={styles.notes}>
                              <div className={styles.notesHeader}>
                                <LuFileText
                                  size={16}
                                  color="#f59e0b"
                                />
                                <span>Class Notes</span>
                              </div>
                              <p>{instance.notes}</p>
                            </div>
                          )}

                          {/* Reschedule Info */}
                          {instance.rescheduledToDate && (
                            <div className={styles.reschedule}>
                              <div className={styles.rescheduleHeader}>
                                <LuCalendar
                                  size={16}
                                  color="#3b82f6"
                                />
                                <span>Rescheduled To</span>
                              </div>
                              <p>
                                {formatDate(instance.rescheduledToDate).weekday}
                                , {formatDate(instance.rescheduledToDate).month}{' '}
                                {formatDate(instance.rescheduledToDate).day} at{' '}
                                {formatDate(instance.rescheduledToDate).time}
                              </p>
                            </div>
                          )}
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </div>
              </motion.div>
            );
          })}
        </div>
      </div>
    </div>
  );
};

export default ScheduleHistory;
